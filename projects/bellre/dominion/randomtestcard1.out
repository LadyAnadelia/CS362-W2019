
5000000 Tests Passed!	0 buys failed, 0 coins count failed, 0 discard count failed, and 0 hand count failied!
All Tests Pass for Baron Card!!!

File 'dominion.c'
Lines executed:24.24% of 557
Branches executed:22.87% of 411
Taken at least once:18.25% of 411
Calls executed:14.89% of 94
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 150000000 returned 100% blocks executed 83%
150000000:    8:int compare(const void* a, const void* b) {
150000000:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 150000000
    #####:   10:    return 1;
150000000:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 40000000 (fallthrough)
branch  1 taken 110000000
 40000000:   12:    return -1;
110000000:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 5000000 returned 100% blocks executed 88%
  5000000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
  5000000:   44:  SelectStream(1);
call    0 returned 5000000
  5000000:   45:  PutSeed((long)randomSeed);
call    0 returned 5000000
        -:   46:  
        -:   47:  //check number of players
  5000000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 5000000 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 5000000
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
  5000000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
 55000000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 50000000
branch  1 taken 5000000 (fallthrough)
        -:   58:    {
550000000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 500000000
branch  1 taken 50000000 (fallthrough)
        -:   60:        {
500000000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 450000000 (fallthrough)
branch  1 taken 50000000
branch  2 taken 0 (fallthrough)
branch  3 taken 450000000
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
  5000000:   73:  if (numPlayers == 2)
branch  0 taken 5000000 (fallthrough)
branch  1 taken 0
        -:   74:    {
  5000000:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
  5000000:   87:  if (numPlayers == 2)
branch  0 taken 5000000 (fallthrough)
branch  1 taken 0
        -:   88:    {
  5000000:   89:      state->supplyCount[estate] = 8;
  5000000:   90:      state->supplyCount[duchy] = 8;
  5000000:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
  5000000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
  5000000:  102:  state->supplyCount[silver] = 40;
  5000000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
105000000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 100000000
branch  1 taken 5000000 (fallthrough)
        -:  107:    {
865000000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 810000000
branch  1 taken 55000000 (fallthrough)
        -:  109:	{
810000000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 45000000 (fallthrough)
branch  1 taken 765000000
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
 45000000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 45000000 (fallthrough)
branch  1 taken 0
branch  2 taken 5000000 (fallthrough)
branch  3 taken 40000000
        -:  114:		{
 10000000:  115:		  if (numPlayers == 2){ 
branch  0 taken 5000000 (fallthrough)
branch  1 taken 0
  5000000:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
 40000000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
 45000000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
765000000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
 15000000:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 10000000
branch  1 taken 5000000 (fallthrough)
        -:  139:    {
 10000000:  140:      state->deckCount[i] = 0;
 40000000:  141:      for (j = 0; j < 3; j++)
branch  0 taken 30000000
branch  1 taken 10000000 (fallthrough)
        -:  142:	{
 30000000:  143:	  state->deck[i][j] = estate;
 30000000:  144:	  state->deckCount[i]++;
        -:  145:	}
 80000000:  146:      for (j = 3; j < 10; j++)
branch  0 taken 70000000
branch  1 taken 10000000 (fallthrough)
        -:  147:	{
 70000000:  148:	  state->deck[i][j] = copper;
 70000000:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
 15000000:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 10000000
branch  1 taken 5000000 (fallthrough)
        -:  155:    {
 10000000:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 10000000
branch  1 taken 0 (fallthrough)
branch  2 taken 10000000
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
 15000000:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 10000000
branch  1 taken 5000000 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
 10000000:  166:      state->handCount[i] = 0;
 10000000:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
140000000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 135000000
branch  1 taken 5000000 (fallthrough)
        -:  177:    {
135000000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
  5000000:  182:  state->outpostPlayed = 0;
  5000000:  183:  state->phase = 0;
  5000000:  184:  state->numActions = 1;
  5000000:  185:  state->numBuys = 1;
  5000000:  186:  state->playedCardCount = 0;
  5000000:  187:  state->whoseTurn = 0;
  5000000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
 30000000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 25000000
branch  1 taken 5000000 (fallthrough)
 25000000:  193:    drawCard(state->whoseTurn, state);
call    0 returned 25000000
        -:  194:  }
        -:  195:
  5000000:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 5000000
        -:  197:
  5000000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 10000000 returned 100% blocks executed 94%
 10000000:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
 10000000:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
 10000000:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 10000000
    #####:  210:    return -1;
 10000000:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 10000000
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
120000000:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 100000000
branch  1 taken 10000000 (fallthrough)
100000000:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100000000
100000000:  216:    newDeck[newDeckPos] = state->deck[player][card];
100000000:  217:    newDeckPos++;
380000000:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 280000000
branch  1 taken 100000000 (fallthrough)
280000000:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
100000000:  221:    state->deckCount[player]--;
        -:  222:  }
110000000:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 100000000
branch  1 taken 10000000 (fallthrough)
100000000:  224:    state->deck[player][i] = newDeck[i];
100000000:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
 10000000:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 5205240 returned 100% blocks executed 100%
  5205240:  320:int supplyCount(int card, struct gameState *state) {
  5205240:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 324930 returned 100% blocks executed 82%
   324930:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
   324930:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 324930
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
   324930:  401:  j = 0;
  8448180:  402:  for (i = 0; i < 25; i++)
branch  0 taken 8123250
branch  1 taken 324930 (fallthrough)
        -:  403:    {
  8123250:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 324930 (fallthrough)
branch  1 taken 7798320
        -:  405:	{
   324930:  406:	  j++;
        -:  407:	}
        -:  408:    }
   324930:  409:  if ( j >= 3)
branch  0 taken 0 (fallthrough)
branch  1 taken 324930
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
   324930:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 25000000 returned 100% blocks executed 38%
 25000000:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
 25000000:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0 (fallthrough)
branch  1 taken 25000000
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
 25000000:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
 25000000:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
 25000000:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
 25000000:  576:    state->deckCount[player]--;
 25000000:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
 25000000:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:      
        -:  646:
        -:  647:                                                                                    
function cardCheck called 2602620 returned 100% blocks executed 100%
  2602620:  648:void cardCheck(int card, struct gameState *state, int currentPlayer)
        -:  649:{
  2602620:  650:	if(supplyCount(card, state) > 0)
call    0 returned 2602620
branch  1 taken 2277690 (fallthrough)
branch  2 taken 324930
        -:  651:	{
  2277690:  652:		gainCard(card, state, 0, currentPlayer); // gain that type of card
call    0 returned 2277690
  2277690:  653:		state->supplyCount[card]--; // decrement that card from the supply
        -:  654:	}
   324930:  655:	else if(supplyCount(card, state) == 0)
call    0 returned 324930
branch  1 taken 324930 (fallthrough)
branch  2 taken 0
   324930:  656:		isGameOver(state);
call    0 returned 324930
        -:  657:
  2602620:  658:}
        -:  659:
function caseBaron called 5000000 returned 100% blocks executed 100%
  5000000:  660:int caseBaron(struct gameState *state, int choice1, int currentPlayer)
        -:  661:{
        -:  662:	//printf("This is the baron card");
  5000000:  663:      state->numBuys++;//Increase buys by 1!
  5000000:  664:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 4807981 (fallthrough)
branch  1 taken 192019
  4807981:  665:	int p = 0;//Iterator for hand! 
  4807981:  666:	int card_not_discarded = 1;//Flag for discard set!
621648896:  667:	while(card_not_discarded){
branch  0 taken 612032934
branch  1 taken 4807981 (fallthrough)
612032934:  668:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 taken 2397380 (fallthrough)
branch  1 taken 609635554
  2397380:  669:	    state->coins += 4;//Add 4 coins to the amount of coins
  2397380:  670:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
  2397380:  671:	    state->discardCount[currentPlayer]++;
596924049:  672:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 taken 594526669
branch  1 taken 2397380 (fallthrough)
594526669:  673:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  674:	    }
  2397380:  675:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
  2397380:  676:	    state->handCount[currentPlayer]--;
  2397380:  677:	    card_not_discarded = 0;//Exit the loop
        -:  678:	  }
609635554:  679:	  else if (p > state->handCount[currentPlayer]){
branch  0 taken 2410601 (fallthrough)
branch  1 taken 607224953
        -:  680:	    if(DEBUG) {
        -:  681:	      printf("No estate cards in your hand, invalid choice\n");
        -:  682:	      printf("Must gain an estate if there are any\n");
        -:  683:	    }
        -:  684:
  2410601:  685:		cardCheck(estate, state, currentPlayer);
call    0 returned 2410601
  2410601:  686:	    card_not_discarded = 0;//Exit the loop
        -:  687:	  }
        -:  688:			    
        -:  689:	  else{
607224953:  690:	    p++;//Next card
        -:  691:	  }
        -:  692:	}
        -:  693:      }
        -:  694:			    
        -:  695:      else{
   192019:  696:		cardCheck(estate, state, currentPlayer);
call    0 returned 192019
        -:  697:      }
  5000000:  698:	return 0;
        -:  699:}	    
        -:  700:
        -:  701:
function caseMine called 0 returned 0% blocks executed 0%
    #####:  702:int caseMine(struct gameState *state, int choice1, int choice2, int handPos, int currentPlayer)
        -:  703:{                                											
        -:  704:	//printf("This is the mine card");
        -:  705:	int j;
    #####:  706:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  707:
    #####:  708:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  709:	{
    #####:  710:	  return -1;
        -:  711:	}
        -:  712:		
    #####:  713:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  714:	{
    #####:  715:	  return -1;
        -:  716:	}
        -:  717:
    #####:  718:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) < getCost(choice2) ) //**BUG HERE**
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  719:	{
    #####:  720:	  return -1;
        -:  721:	}
        -:  722:
    #####:  723:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  724:
        -:  725:      //discard card from hand
    #####:  726:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  727:
        -:  728:      //discard trashed card
        -:  729:	int i;
    #####:  730:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  731:	{
    #####:  732:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  733:	    {
    #####:  734:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
        -:  735:	     // break;  **BUG HERE**
        -:  736:	    }
        -:  737:	}
    #####:  738:	return 0;
        -:  739:}		
        -:  740:
        -:  741://needs the player who will be drawing cards and how many will be drawn
function simpleForLoop called 0 returned 0% blocks executed 0%
    #####:  742:void simpleForLoop(int player, struct gameState *state, int loopNum)
        -:  743:{
        -:  744:	int i;
    #####:  745:	for(i = 0; i < loopNum; i++)
branch  0 never executed
branch  1 never executed
        -:  746:	{
    #####:  747:		drawCard(player, state);
call    0 never executed
        -:  748:	}
    #####:  749:}
        -:  750:
function caseMinion called 0 returned 0% blocks executed 0%
    #####:  751:int caseMinion(struct gameState *state, int choice1, int choice2, int handPos, int currentPlayer)    
        -:  752:{
        -:  753:      //+1 action
    #####:  754:      state->numActions++;
        -:  755:			
        -:  756:      //discard card from hand
    #####:  757:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  758:			
    #####:  759:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  760:	{
    #####:  761:	  state->coins = state->coins + 2;
        -:  762:	}
        -:  763:			
    #####:  764:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  765:	{
        -:  766:	  //discard hand
    #####:  767:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  768:	    {
    #####:  769:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  770:	    }
        -:  771:				
        -:  772:	  //draw 4
    #####:  773:		simpleForLoop(currentPlayer, state, 4); 			
call    0 never executed
        -:  774:	  //other players discard hand and redraw if hand size > 4
        -:  775:	int i; 
    #####:  776:	 for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  777:	    {
    #####:  778:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  779:		{
    #####:  780:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  781:		    {
        -:  782:		      //discard hand
    #####:  783:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  784:			{
    #####:  785:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  786:			}
        -:  787:							
        -:  788:		      //draw 4
    #####:  789:			simpleForLoop(i, state, 4);    
call    0 never executed
        -:  790:		}
        -:  791:		}
        -:  792:	    }
        -:  793:				
        -:  794:	}
    #####:  795:return 0;
        -:  796:}
        -:  797:
        -:  798:
function caseAmbassador called 0 returned 0% blocks executed 0%
    #####:  799:int caseAmbassador(struct gameState *state, int choice1, int choice2, int handPos, int currentPlayer)  
        -:  800:{
        -:  801:	int j, i;																	
    #####:  802:      j = 0;		//used to check if player has enough cards to discard
        -:  803:
    #####:  804:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  805:	{
    #####:  806:	  return -1;				
        -:  807:	}
        -:  808:
    #####:  809:      if (choice1 = handPos) // **BUG HERE**
branch  0 never executed
branch  1 never executed
        -:  810:	{
    #####:  811:	  return -1;
        -:  812:	}
        -:  813:
    #####:  814:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  815:	{
    #####:  816:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  817:	    {
    #####:  818:	      j++;
        -:  819:	    }
        -:  820:	}
    #####:  821:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  822:	{
    #####:  823:	  return -1;				
        -:  824:	}
        -:  825:
        -:  826:      if (DEBUG) 
        -:  827:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  828:
        -:  829:      //increase supply count for choosen card by amount being discarded
        -:  830:      //state->supplyCount[state->hand[currentPlayer][choice1]] += choice2; **BUG HERE**
        -:  831:			
        -:  832:      //each other player gains a copy of revealed card
    #####:  833:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  834:	{
    #####:  835:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  836:	    {
    #####:  837:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  838:	    }
        -:  839:	}
        -:  840:
        -:  841:      //discard played card from hand
    #####:  842:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  843:
        -:  844:      //trash copies of cards returned to supply
    #####:  845:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  846:	{
    #####:  847:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  848:	    {
    #####:  849:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  850:		{
    #####:  851:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  852:		  break;
        -:  853:		}
        -:  854:	    }
        -:  855:	}			
        -:  856:
    #####:  857:	return 0;
        -:  858:}
        -:  859:
function caseTribute called 0 returned 0% blocks executed 0%
    #####:  860:int caseTribute(struct gameState *state, int currentPlayer, int nextPlayer) 
        -:  861:{
    #####:  862:	int tributeRevealedCards[2] = {-1, -1};
        -:  863:	int i;
    #####:  864:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  865:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  866:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  867:	  state->deckCount[nextPlayer]--;
        -:  868:	}
    #####:  869:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  870:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  871:	  state->discardCount[nextPlayer]--;
        -:  872:	}
        -:  873:	else{
        -:  874:	  //No Card to Reveal
        -:  875:	  if (DEBUG){
        -:  876:	    printf("No cards to reveal\n");
        -:  877:	  }
        -:  878:	}
        -:  879:	}    
        -:  880:      else{
    #####:  881:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  882:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  883:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  884:	    state->deckCount[nextPlayer]++;
    #####:  885:	    state->discard[nextPlayer][i] = -1;
    #####:  886:	    state->discardCount[nextPlayer]--;
        -:  887:	  }
        -:  888:			    
    #####:  889:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  890:	} 
    #####:  891:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  892:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  893:	state->deckCount[nextPlayer]--;
    #####:  894:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  895:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  896:	state->deckCount[nextPlayer]--;
        -:  897:      }    
        -:  898:		       
    #####:  899:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  900:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  901:	state->playedCardCount++;
    #####:  902:	tributeRevealedCards[1] = -1;
        -:  903:      }
        -:  904:	
    #####:  905:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  906:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  907:	  state->coins += 2;
        -:  908:	}
        -:  909:		    
    #####:  910:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  911:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  912:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  913:	}
        -:  914:	else{//Action Card
    #####:  915:	  state->numActions = state->numActions + 2;
        -:  916:	}
        -:  917:      }
        -:  918:	    
    #####:  919:	return 0;
        -:  920:}
        -:  921:
        -:  922:
        -:  923:
        -:  924:
        -:  925:
        -:  926:
        -:  927:
        -:  928:
        -:  929:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  930:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  931:{
        -:  932:  int i;
        -:  933:  int j;
        -:  934:  int k;
        -:  935:  int x;
        -:  936:  int index;
    #####:  937:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  938:  int nextPlayer = currentPlayer + 1;
        -:  939:  
        -:  940:  int temphand[MAX_HAND];// moved above the if statement
    #####:  941:  int drawntreasure=0;
        -:  942:  int cardDrawn;
    #####:  943:  int z = 0;// this is the counter for the temp hand
    #####:  944:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  945:    nextPlayer = 0;
        -:  946:  }
        -:  947:  
        -:  948:	
        -:  949:  //uses switch to select card and perform actions
    #####:  950:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  951:    {
        -:  952:    case adventurer:
    #####:  953:      while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:  954:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  955:	  shuffle(currentPlayer, state);
call    0 never executed
        -:  956:	}
    #####:  957:	drawCard(currentPlayer, state);
call    0 never executed
    #####:  958:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  959:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  960:	  drawntreasure++;
        -:  961:	else{
    #####:  962:	  temphand[z]=cardDrawn;
    #####:  963:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  964:	  z++;
        -:  965:	}
        -:  966:      }
    #####:  967:      while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  968:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  969:	z=z-1;
        -:  970:      }
    #####:  971:      return 0;
        -:  972:			
        -:  973:    case council_room:
        -:  974:      //+4 Cards
    #####:  975:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  976:	{
    #####:  977:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  978:	}
        -:  979:			
        -:  980:      //+1 Buy
    #####:  981:      state->numBuys++;
        -:  982:			
        -:  983:      //Each other player draws a card
    #####:  984:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  985:	{
    #####:  986:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  987:	    {
    #####:  988:	      drawCard(i, state);
call    0 never executed
        -:  989:	    }
        -:  990:	}
        -:  991:			
        -:  992:      //put played card in played card pile
    #####:  993:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  994:			
    #####:  995:      return 0;
        -:  996:			
        -:  997:    case feast:
        -:  998:      //gain card with cost up to 5
        -:  999:      //Backup hand
    #####: 1000:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1001:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1002:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1003:      }
        -: 1004:      //Backup hand
        -: 1005:
        -: 1006:      //Update Coins for Buy
    #####: 1007:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1008:      x = 1;//Condition to loop on
    #####: 1009:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1010:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1011:	  if (DEBUG)
        -: 1012:	    printf("None of that card left, sorry!\n");
        -: 1013:
        -: 1014:	  if (DEBUG){
        -: 1015:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1016:	  }
        -: 1017:	}
    #####: 1018:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1019:	  printf("That card is too expensive!\n");
call    0 never executed
        -: 1020:
        -: 1021:	  if (DEBUG){
        -: 1022:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1023:	  }
        -: 1024:	}
        -: 1025:	else{
        -: 1026:
        -: 1027:	  if (DEBUG){
        -: 1028:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1029:	  }
        -: 1030:
    #####: 1031:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1032:	  x = 0;//No more buying cards
        -: 1033:
        -: 1034:	  if (DEBUG){
        -: 1035:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1036:	  }
        -: 1037:
        -: 1038:	}
        -: 1039:      }     
        -: 1040:
        -: 1041:      //Reset Hand
    #####: 1042:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1043:	state->hand[currentPlayer][i] = temphand[i];
    #####: 1044:	temphand[i] = -1;
        -: 1045:      }
        -: 1046:      //Reset Hand
        -: 1047:      			
    #####: 1048:      return 0;
        -: 1049:			
        -: 1050:    case gardens:
    #####: 1051:      return -1;
        -: 1052:			
        -: 1053:    case mine:
    #####: 1054:	return caseMine(state, choice1, choice2, handPos, currentPlayer);
call    0 never executed
        -: 1055:			
        -: 1056:    case remodel:
    #####: 1057:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1058:
    #####: 1059:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1060:	{
    #####: 1061:	  return -1;
        -: 1062:	}
        -: 1063:
    #####: 1064:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1065:
        -: 1066:      //discard card from hand
    #####: 1067:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1068:
        -: 1069:      //discard trashed card
    #####: 1070:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1071:	{
    #####: 1072:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1073:	    {
    #####: 1074:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####: 1075:	      break;
        -: 1076:	    }
        -: 1077:	}
        -: 1078:
        -: 1079:
    #####: 1080:      return 0;
        -: 1081:		
        -: 1082:    case smithy:
        -: 1083:      //+3 Cards
    #####: 1084:      for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1085:	{
    #####: 1086:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1087:	}
        -: 1088:			
        -: 1089:      //discard card from hand
    #####: 1090:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1091:      return 0;
        -: 1092:		
        -: 1093:    case village:
        -: 1094:      //+1 Card
    #####: 1095:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1096:			
        -: 1097:      //+2 Actions
    #####: 1098:      state->numActions = state->numActions + 2;
        -: 1099:			
        -: 1100:      //discard played card from hand
    #####: 1101:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1102:      return 0;
        -: 1103:		
        -: 1104:    case baron:
        -: 1105:
    #####: 1106:     	return caseBaron(state, choice1, currentPlayer);
call    0 never executed
        -: 1107:		
        -: 1108:    case great_hall:
        -: 1109:      //+1 Card
    #####: 1110:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1111:			
        -: 1112:      //+1 Actions
    #####: 1113:      state->numActions++;
        -: 1114:			
        -: 1115:      //discard card from hand
    #####: 1116:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1117:      return 0;                                                                                                                                   
        -: 1118:    case minion:
    #####: 1119:	return caseMinion(state, choice1, choice2, handPos, currentPlayer);
call    0 never executed
        -: 1120:
        -: 1121:    case steward:
    #####: 1122:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1123:	{
        -: 1124:	  //+2 cards
    #####: 1125:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1126:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1127:	}
    #####: 1128:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1129:	{
        -: 1130:	  //+2 coins
    #####: 1131:	  state->coins = state->coins + 2;
        -: 1132:	}
        -: 1133:      else
        -: 1134:	{
        -: 1135:	  //trash 2 cards in hand
    #####: 1136:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1137:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1138:	}
        -: 1139:			
        -: 1140:      //discard card from hand
    #####: 1141:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1142:      return 0;
        -: 1143:		
        -: 1144:    case tribute:
    #####: 1145:	return caseTribute(state, currentPlayer, nextPlayer);
call    0 never executed
        -: 1146:
        -: 1147:
        -: 1148:	case ambassador:
        -: 1149:
    #####: 1150:	return caseAmbassador(state, choice1, choice2, handPos, currentPlayer);
call    0 never executed
        -: 1151:		
        -: 1152:    case cutpurse:
        -: 1153:
    #####: 1154:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1155:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1156:	{
    #####: 1157:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1158:	    {
    #####: 1159:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1160:		{
    #####: 1161:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1162:		    {
    #####: 1163:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1164:		      break;
        -: 1165:		    }
    #####: 1166:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1167:		    {
    #####: 1168:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1169:			{
        -: 1170:			  if (DEBUG)
        -: 1171:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1172:			}	
    #####: 1173:		      break;
        -: 1174:		    }		
        -: 1175:		}
        -: 1176:					
        -: 1177:	    }
        -: 1178:				
        -: 1179:	}				
        -: 1180:
        -: 1181:      //discard played card from hand
    #####: 1182:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1183:
    #####: 1184:      return 0;
        -: 1185:
        -: 1186:		
        -: 1187:    case embargo: 
        -: 1188:      //+2 Coins
    #####: 1189:      state->coins = state->coins + 2;
        -: 1190:			
        -: 1191:      //see if selected pile is in play
    #####: 1192:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1193:	{
    #####: 1194:	  return -1;
        -: 1195:	}
        -: 1196:			
        -: 1197:      //add embargo token to selected supply pile
    #####: 1198:      state->embargoTokens[choice1]++;
        -: 1199:			
        -: 1200:      //trash card
    #####: 1201:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1202:      return 0;
        -: 1203:		
        -: 1204:    case outpost:
        -: 1205:      //set outpost flag
    #####: 1206:      state->outpostPlayed++;
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
        -: 1212:    case salvager:
        -: 1213:      //+1 buy
    #####: 1214:      state->numBuys++;
        -: 1215:			
    #####: 1216:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1217:	{
        -: 1218:	  //gain coins equal to trashed card
    #####: 1219:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1220:	  //trash card
    #####: 1221:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1222:	}
        -: 1223:			
        -: 1224:      //discard card
    #####: 1225:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1226:      return 0;
        -: 1227:		
        -: 1228:    case sea_hag:
    #####: 1229:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1230:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1231:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1232:	  state->discardCount[i]++;
    #####: 1233:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1234:	}
        -: 1235:      }
    #####: 1236:      return 0;
        -: 1237:		
        -: 1238:    case treasure_map:
        -: 1239:      //search hand for another treasure_map
    #####: 1240:      index = -1;
    #####: 1241:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1242:	{
    #####: 1243:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1244:	    {
    #####: 1245:	      index = i;
    #####: 1246:	      break;
        -: 1247:	    }
        -: 1248:	}
    #####: 1249:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1250:	{
        -: 1251:	  //trash both treasure cards
    #####: 1252:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1253:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1254:
        -: 1255:	  //gain 4 Gold cards
    #####: 1256:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1257:	    {
    #####: 1258:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1259:	    }
        -: 1260:				
        -: 1261:	  //return success
    #####: 1262:	  return 1;
        -: 1263:	}
        -: 1264:			
        -: 1265:      //no second treasure_map found in hand
    #####: 1266:      return -1;
        -: 1267:    }
        -: 1268:	
    #####: 1269:  return -1;
        -: 1270:}
        -: 1271:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1272:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1273:{
        -: 1274:	
        -: 1275:  //if card is not trashed, added to Played pile 
    #####: 1276:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1277:    {
        -: 1278:      //add card to played pile
    #####: 1279:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1280:      state->playedCardCount++;
        -: 1281:    }
        -: 1282:	
        -: 1283:  //set played card to -1
    #####: 1284:  state->hand[currentPlayer][handPos] = -1;
        -: 1285:	
        -: 1286:  //remove card from player's hand
    #####: 1287:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1288:    {
        -: 1289:      //reduce number of cards in hand
    #####: 1290:      state->handCount[currentPlayer]--;
        -: 1291:    }
    #####: 1292:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1293:    {
        -: 1294:      //reduce number of cards in hand
    #####: 1295:      state->handCount[currentPlayer]--;
        -: 1296:    }
        -: 1297:  else 	
        -: 1298:    {
        -: 1299:      //replace discarded card with last card in hand
    #####: 1300:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1301:      //set last card to -1
    #####: 1302:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1303:      //reduce number of cards in hand
    #####: 1304:      state->handCount[currentPlayer]--;
        -: 1305:    }
        -: 1306:	
    #####: 1307:  return 0;
        -: 1308:}
        -: 1309:
function gainCard called 2277690 returned 100% blocks executed 70%
  2277690: 1310:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1311:{
        -: 1312:  //Note: supplyPos is enum of choosen card
        -: 1313:	
        -: 1314:  //check if supply pile is empty (0) or card is not used in game (-1)
  2277690: 1315:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 2277690
branch  1 taken 0 (fallthrough)
branch  2 taken 2277690
        -: 1316:    {
    #####: 1317:      return -1;
        -: 1318:    }
        -: 1319:	
        -: 1320:  //added card for [whoseTurn] current player:
        -: 1321:  // toFlag = 0 : add to discard
        -: 1322:  // toFlag = 1 : add to deck
        -: 1323:  // toFlag = 2 : add to hand
        -: 1324:
  2277690: 1325:  if (toFlag == 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 2277690
        -: 1326:    {
    #####: 1327:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1328:      state->deckCount[player]++;
        -: 1329:    }
  2277690: 1330:  else if (toFlag == 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 2277690
        -: 1331:    {
    #####: 1332:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1333:      state->handCount[player]++;
        -: 1334:    }
        -: 1335:  else
        -: 1336:    {
  2277690: 1337:      state->discard[player][ state->discardCount[player] ] = supplyPos;
  2277690: 1338:      state->discardCount[player]++;
        -: 1339:    }
        -: 1340:	
        -: 1341:  //decrease number in supply pile
  2277690: 1342:  state->supplyCount[supplyPos]--;
        -: 1343:	 
  2277690: 1344:  return 0;
        -: 1345:}
        -: 1346:
function updateCoins called 5000000 returned 100% blocks executed 82%
  5000000: 1347:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1348:{
        -: 1349:  int i;
        -: 1350:	
        -: 1351:  //reset coin count
  5000000: 1352:  state->coins = 0;
        -: 1353:
        -: 1354:  //add coins for each Treasure card in player's hand
 30000000: 1355:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 25000000
branch  1 taken 5000000 (fallthrough)
        -: 1356:    {
 25000000: 1357:      if (state->hand[player][i] == copper)
branch  0 taken 20000000 (fallthrough)
branch  1 taken 5000000
        -: 1358:	{
 20000000: 1359:	  state->coins += 1;
        -: 1360:	}
  5000000: 1361:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 5000000
        -: 1362:	{
    #####: 1363:	  state->coins += 2;
        -: 1364:	}
  5000000: 1365:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 5000000
        -: 1366:	{
    #####: 1367:	  state->coins += 3;
        -: 1368:	}	
        -: 1369:    }	
        -: 1370:
        -: 1371:  //add bonus
  5000000: 1372:  state->coins += bonus;
        -: 1373:
  5000000: 1374:  return 0;
        -: 1375:}
        -: 1376:
        -: 1377:
        -: 1378://end of dominion.c
        -: 1379:
