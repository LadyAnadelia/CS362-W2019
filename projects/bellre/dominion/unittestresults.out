Here is the results of the tests:
Results for unittest1.c
-----------Testing card: baron --------------
The return value of the function is 0, expected = 0
number of Buys = 1, expected = 1
number of Buys increase = 2, expected = 2
number of coins in hand = 8, expected = 8
discard card count = 1, expected 1
cards in hand = 4 expected = 4
File 'dominion.c'
Lines executed:18.92% of 555
Creating 'dominion.c.gcov'

Results for unittest2.c
-----------Testing card: minion --------------
Return value = 0, expected = 0
Coin count change with choice1 = 6, expected = 6
count of discard cards = 4, expected = 4
CurrentPlayers hand = 4, expected = 5
Next Players hand = 0, expected = 0
Return value = 0, expected = 0
CurrentPlayers hand = 5, expected = 4
Next Players hand = 0, expected = 4
File 'dominion.c'
Lines executed:26.85% of 555
Creating 'dominion.c.gcov'

Results for unittest3.c
-----------Testing card: ambassador --------------
Next Players card count before = 10, expected = 10
Return value if all values enter correctly = 0, expected = 0
supply count of card = 45, expected 40
Next Players card count after = 10, expected = 11
Return value if choice2 < 0 = -1, expected = -1
Return value if choice 2 > 2 = -1, expected = -1
Return value if hand pos = choice1 is -1, expected = -1
Return value if hand count < choice2 is -1, expected = -1
File 'dominion.c'
Lines executed:32.25% of 555
Creating 'dominion.c.gcov'

Results for unittest4.c
-----------Testing card: tribute --------------
Return value of the function = 0, expected 0
Discard Count = 0, expected = 0
Deck Count = -2, expected = 10
Played card count = 0
Values before chang by the cards listed below
	Coins = 4, 	Action = 1, 	Hand = 5
Values after change by the cards listed below
	Coins = 4, 	Action = 1, 	Hand = 5
File 'dominion.c'
Lines executed:32.97% of 555
Creating 'dominion.c.gcov'

Results for unittest5.c
-----------Testing card: mine --------------
Set a non-coin return = -1, expected = -1
Set bad value for choice2 return = -1, expected = -1
All Correct value = -1, expected = 0
Cant afford: cost 1 = 6 < cost 2 = 8
Return value = -1, expected = -1
Can Afford: cost 1 = 6 < cost 2 = 3
Return value = 0, expected = 0
hand Count = 3, expected = 3
File 'dominion.c'
Lines executed:36.76% of 555
Creating 'dominion.c.gcov'

Results for cardtest1.c
-----------Testing function: initializeGame() --------------
return value 5 game players = -1, expected = -1
return value 1 game player = -1, expected = -1
return value 2 game player 1 repeated card = -1, expected = -1
Return value = 0, expected = 0
2 Players: supply curse = 10, expected = 10
2 Players: supply estate = 8, expected = 8
2 Players: supply duchy = 8, expected = 8
2 Players: supply province = 8, expected = 8
2 Players: supply copper = 46, expected = 46
2 Players: supply silver = 40, expected = 40
2 Players: supply gold = 30, expected = 30
Return value = 0, expected = 0
3 Players: supply curse = 20, expected = 20
3 Players: supply estate = 12, expected = 12
3 Players: supply duchy = 12, expected = 12
3 Players: supply province = 12, expected = 12
3 Players: supply copper = 39, expected = 39
3 Players: supply silver = 40, expected = 40
3 Players: supply gold = 30, expected = 30
Return value = 0, expected = 0
4 Players: supply curse = 30, expected = 30
4 Players: supply estate = 12, expected = 12
4 Players: supply duchy = 12, expected = 12
4 Players: supply province = 12, expected = 12
4 Players: supply copper = 32, expected = 32
4 Players: supply silver = 40, expected = 40
4 Players: supply gold = 30, expected = 30
File 'dominion.c'
Lines executed:38.38% of 555
Creating 'dominion.c.gcov'

Results for cardtest2.c
-----------Testing function: shuffle() --------------
return value with cards in deck = 0, expected = 0
return value with NO cards in deck = -1, expected = -1
check the return value with no discard cards = 0, expected = 0
check return value with discard cards = 0, expected = -1
check the return value with no discard cards = 0, expected = 0
check shuffle of cards = 0, expected = 0File 'dominion.c'
Lines executed:38.56% of 555
Creating 'dominion.c.gcov'

Results for cardtest3.c
-----------Testing function: endturn() --------------
The return value of the function is 0, expected = 0
Player changed to 1, expected to != 0
Players hand count changed to 0, expected = 0
The return value of the function is 0, expected = 0
Player changed to 0, expected to = 0
Players number of cards = 5, expected 0
File 'dominion.c'
Lines executed:42.16% of 555
Creating 'dominion.c.gcov'

Results for cardtest4.c
-----------Testing card: getWinner() --------------
Test functions value = 0, expected = 0
Unplayed players = 1, expected = -9999
Test of winner being player 0, return value 0
Test of winner being player 1, return value 0
Test of score expected score > 0 got 0
File 'dominion.c'
Lines executed:48.11% of 555
Creating 'dominion.c.gcov'

Results for cardtest5.c
-----------Testing function: drawCard() --------------
Testing return value = 0, expected = 0
Testing deck Count = 4, expected 4
Testing hand Count = 6, expected 6
Testing next Players deckCount = 10, expected 10
Testing next Players handCount = 0, expected 0
Testing new deckCount = 0, expected 0
Testing return value with no discard card = -1, expected = -1
Testing deck Count = 0, expected 4
Testing hand Count = 6, expected 6
Testing next Players deckCount = 10, expected 10
Testing next Players handCount = 0, expected 0
File 'dominion.c'
Lines executed:48.11% of 555
Creating 'dominion.c.gcov'

