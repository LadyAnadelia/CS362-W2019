        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:10
        -:    0:Programs:10
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      443:    8:int compare(const void* a, const void* b) {
      443:    9:  if (*(int*)a > *(int*)b)
        9:   10:    return 1;
      434:   11:  if (*(int*)a < *(int*)b)
      114:   12:    return -1;
      320:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       15:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       15:   44:  SelectStream(1);
       15:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       15:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
        2:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       13:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      135:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1346:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1224:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
        1:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       12:   73:  if (numPlayers == 2)
        -:   74:    {
       10:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       12:   87:  if (numPlayers == 2)
        -:   88:    {
       10:   89:      state->supplyCount[estate] = 8;
       10:   90:      state->supplyCount[duchy] = 8;
       10:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       12:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       12:  102:  state->supplyCount[silver] = 40;
       12:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      252:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1980:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1860:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      120:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       48:  115:		  if (numPlayers == 2){ 
       20:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        4:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       96:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      120:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1740:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       39:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       27:  140:      state->deckCount[i] = 0;
      108:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       81:  143:	  state->deck[i][j] = estate;
       81:  144:	  state->deckCount[i]++;
        -:  145:	}
      216:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      189:  148:	  state->deck[i][j] = copper;
      189:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       39:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       27:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       39:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       27:  166:      state->handCount[i] = 0;
       27:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      336:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      324:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       12:  182:  state->outpostPlayed = 0;
       12:  183:  state->phase = 0;
       12:  184:  state->numActions = 1;
       12:  185:  state->numBuys = 1;
       12:  186:  state->playedCardCount = 0;
       12:  187:  state->whoseTurn = 0;
       12:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       72:  192:  for (it = 0; it < 5; it++){
       60:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       12:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       12:  198:  return 0;
        -:  199:}
        -:  200:
      130:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      130:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      130:  209:  if (state->deckCount[player] < 1)
       99:  210:    return -1;
       31:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      357:  214:  while (state->deckCount[player] > 0) {
      295:  215:    card = floor(Random() * state->deckCount[player]);
      295:  216:    newDeck[newDeckPos] = state->deck[player][card];
      295:  217:    newDeckPos++;
     1010:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      715:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      295:  221:    state->deckCount[player]--;
        -:  222:  }
      326:  223:  for (i = 0; i < newDeckPos; i++) {
      295:  224:    state->deck[player][i] = newDeck[i];
      295:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       31:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
        5:  311:int numHandCards(struct gameState *state) {
        5:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        2:  320:int supplyCount(int card, struct gameState *state) {
        2:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       13:  346:int whoseTurn(struct gameState *state) {
       13:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        2:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        2:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
       12:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
       10:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       10:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
        2:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
        2:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
        1:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
        1:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        2:  370:  state->outpostPlayed = 0;
        2:  371:  state->phase = 0;
        2:  372:  state->numActions = 1;
        2:  373:  state->coins = 0;
        2:  374:  state->numBuys = 1;
        2:  375:  state->playedCardCount = 0;
        2:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       12:  380:  for (k = 0; k < 5; k++){
       10:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
        2:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
        2:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
        7:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        7:  420:  int score = 0;
        -:  421:  //score from hand
       22:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
       15:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
       15:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
       15:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
       15:  427:      if (state->hand[player][i] == province) { score = score + 6; };
       15:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       15:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
        7:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
        7:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
        7:  454:  return score;
        -:  455:}
        -:  456:
        3:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
       15:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
       12:  467:      if (i >= state->numPlayers)
        -:  468:	{
        6:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
        6:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
        3:  478:  j = 0;
       15:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
       12:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
        3:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
        3:  489:  currentPlayer = whoseTurn(state);
       15:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
       12:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
        3:  499:  j = 0;
       15:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
       12:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
        3:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
       15:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
       12:  512:      if ( players[i] == highScore )
        -:  513:	{
        3:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
        9:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
        3:  522:  return 0;
        -:  523:}
        -:  524:
      173:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      173:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       97:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       97:  538:    state->deckCount[player] = state->discardCount[player];
       97:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       97:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       97:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       97:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       97:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       97:  559:    if (deckCounter == 0)
       97:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       76:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       76:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       76:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       76:  576:    state->deckCount[player]--;
       76:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       76:  580:  return 0;
        -:  581:}
        -:  582:
       10:  583:int getCost(int cardNumber)
        -:  584:{
       10:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
        3:  594:      return 8;
        -:  595:    case copper:
        3:  596:      return 0;
        -:  597:    case silver:
        2:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
        2:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:      
        -:  646:
        -:  647:                                                                                    
    #####:  648:void cardCheck(int card, struct gameState *state, int currentPlayer)
        -:  649:{
    #####:  650:	if(supplyCount(card, state) > 0)
        -:  651:	{
    #####:  652:		gainCard(card, state, 0, currentPlayer); // gain that type of card
    #####:  653:		state->supplyCount[card]--; // decrement that card from the supply
    #####:  654:		if(supplyCount(card, state) == 0)
        -:  655:		{
    #####:  656:			isGameOver(state);
        -:  657:		}
        -:  658:	}
        -:  659:
    #####:  660:}
        -:  661:
        1:  662:int caseBaron(struct gameState *state, int choice1, int currentPlayer)
        -:  663:{
        -:  664:	//printf("This is the baron card");
        1:  665:      state->numBuys++;//Increase buys by 1!
        1:  666:      if (choice1 > 0){//Boolean true or going to discard an estate
        1:  667:	int p = 1;//Iterator for hand! **BUG HERE**
        1:  668:	int card_not_discarded = 1;//Flag for discard set!
        3:  669:	while(card_not_discarded){
        1:  670:	  if (state->hand[currentPlayer][p] = estate){//Found an estate card! **BUG HERE**
        1:  671:	    state->coins += 4;//Add 4 coins to the amount of coins
        1:  672:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        1:  673:	    state->discardCount[currentPlayer]++;
        5:  674:	    for (;p < state->handCount[currentPlayer]; p++){
        4:  675:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  676:	    }
        1:  677:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        1:  678:	    state->handCount[currentPlayer]--;
        1:  679:	    card_not_discarded = 0;//Exit the loop
        -:  680:	  }
        -:  681:	  else if (p > state->handCount[currentPlayer]){
        -:  682:	    if(DEBUG) {
        -:  683:	      printf("No estate cards in your hand, invalid choice\n");
        -:  684:	      printf("Must gain an estate if there are any\n");
        -:  685:	    }
        -:  686:
        -:  687:		cardCheck(estate, state, currentPlayer);
        -:  688:	    card_not_discarded = 0;//Exit the loop
        -:  689:	  }
        -:  690:			    
        -:  691:	  else{
        -:  692:	    p++;//Next card
        -:  693:	  }
        -:  694:	}
        -:  695:      }
        -:  696:			    
        -:  697:      else{
    #####:  698:		cardCheck(estate, state, currentPlayer);
        -:  699:      }
        1:  700:	return 0;
        -:  701:}	    
        -:  702:
        -:  703:
        5:  704:int caseMine(struct gameState *state, int choice1, int choice2, int handPos, int currentPlayer)
        -:  705:{                                											
        -:  706:	//printf("This is the mine card");
        -:  707:	int j;
        5:  708:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  709:
        5:  710:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  711:	{
    #####:  712:	  return -1;
        -:  713:	}
        -:  714:		
        5:  715:      if (choice2 > treasure_map || choice2 < curse)
        -:  716:	{
        2:  717:	  return -1;
        -:  718:	}
        -:  719:
        3:  720:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) < getCost(choice2) ) //**BUG HERE**
        -:  721:	{
        2:  722:	  return -1;
        -:  723:	}
        -:  724:
        1:  725:      gainCard(choice2, state, 2, currentPlayer);
        -:  726:
        -:  727:      //discard card from hand
        1:  728:      discardCard(handPos, currentPlayer, state, 0);
        -:  729:
        -:  730:      //discard trashed card
        -:  731:	int i;
        5:  732:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  733:	{
        4:  734:	  if (state->hand[currentPlayer][i] == j)
        -:  735:	    {
        2:  736:	      discardCard(i, currentPlayer, state, 0);			
        -:  737:	     // break;  **BUG HERE**
        -:  738:	    }
        -:  739:	}
        1:  740:	return 0;
        -:  741:}		
        -:  742:
        -:  743://needs the player who will be drawing cards and how many will be drawn
        1:  744:void simpleForLoop(int player, struct gameState *state, int loopNum)
        -:  745:{
        -:  746:	int i;
      101:  747:	for(i = 0; i < loopNum; i++)
        -:  748:	{
      100:  749:		drawCard(player, state);
        -:  750:	}
        1:  751:}
        -:  752:
        2:  753:int caseMinion(struct gameState *state, int choice1, int choice2, int handPos, int currentPlayer)    
        -:  754:{
        -:  755:      //+1 action
        2:  756:      state->numActions++;
        -:  757:			
        -:  758:      //discard card from hand
        2:  759:      discardCard(handPos, currentPlayer, state, 0);
        -:  760:			
        2:  761:      if (choice1)		//+2 coins
        -:  762:	{
        1:  763:	  state->coins = state->coins + 2;
        -:  764:	}
        -:  765:			
        1:  766:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  767:	{
        -:  768:	  //discard hand
        5:  769:	  while(numHandCards(state) > 0)
        -:  770:	    {
        3:  771:	      discardCard(handPos, currentPlayer, state, 0);
        -:  772:	    }
        -:  773:				
        -:  774:	  //draw 4
        1:  775:		simpleForLoop(currentPlayer, state, 100); //**BUG HERE**			
        -:  776:	  //other players discard hand and redraw if hand size > 4
        -:  777:	int i; 
        3:  778:	 for (i = 0; i < state->numPlayers; i++)
        -:  779:	    {
        2:  780:	      if (i != currentPlayer)
        -:  781:		{
        1:  782:		  if ( state->handCount[i] > 4 )
        -:  783:		    {
        -:  784:		      //discard hand
    #####:  785:		      while( state->handCount[i] > 0 )
        -:  786:			{
    #####:  787:			  discardCard(handPos, i, state, 0);
        -:  788:			}
        -:  789:							
        -:  790:		      //draw 4
    #####:  791:			simpleForLoop(i, state, 4);    
        -:  792:		}
        -:  793:		}
        -:  794:	    }
        -:  795:				
        -:  796:	}
        2:  797:return 0;
        -:  798:}
        -:  799:
        -:  800:
        5:  801:int caseAmbassador(struct gameState *state, int choice1, int choice2, int handPos, int currentPlayer)  
        -:  802:{
        -:  803:	int j, i;																	
        5:  804:      j = 0;		//used to check if player has enough cards to discard
        -:  805:
        5:  806:      if (choice2 > 2 || choice2 < 0)
        -:  807:	{
        2:  808:	  return -1;				
        -:  809:	}
        -:  810:
        3:  811:      if (choice1 = handPos) // **BUG HERE**
        -:  812:	{
        2:  813:	  return -1;
        -:  814:	}
        -:  815:
        6:  816:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  817:	{
        5:  818:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  819:	    {
        1:  820:	      j++;
        -:  821:	    }
        -:  822:	}
        1:  823:      if (j < choice2)
        -:  824:	{
    #####:  825:	  return -1;				
        -:  826:	}
        -:  827:
        -:  828:      if (DEBUG) 
        -:  829:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  830:
        -:  831:      //increase supply count for choosen card by amount being discarded
        -:  832:      //state->supplyCount[state->hand[currentPlayer][choice1]] += choice2; **BUG HERE**
        -:  833:			
        -:  834:      //each other player gains a copy of revealed card
        3:  835:      for (i = 0; i < state->numPlayers; i++)
        -:  836:	{
        2:  837:	  if (i != currentPlayer)
        -:  838:	    {
        1:  839:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  840:	    }
        -:  841:	}
        -:  842:
        -:  843:      //discard played card from hand
        1:  844:      discardCard(handPos, currentPlayer, state, 0);			
        -:  845:
        -:  846:      //trash copies of cards returned to supply
        2:  847:      for (j = 0; j < choice2; j++)
        -:  848:	{
        1:  849:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  850:	    {
        1:  851:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  852:		{
        1:  853:		  discardCard(i, currentPlayer, state, 1);
        1:  854:		  break;
        -:  855:		}
        -:  856:	    }
        -:  857:	}			
        -:  858:
        1:  859:	return 0;
        -:  860:}
        -:  861:
        1:  862:int caseTribute(struct gameState *state, int currentPlayer, int nextPlayer) 
        -:  863:{
        1:  864:	int tributeRevealedCards[2] = {-1, -1};
        -:  865:
        1:  866:	if(currentPlayer == nextPlayer)
        -:  867:	{
        -:  868:	int i;
    #####:  869:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  870:	if (state->deckCount[nextPlayer] > 0){
    #####:  871:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  872:	  state->deckCount[nextPlayer]--;
        -:  873:	}
    #####:  874:	else if (state->discardCount[nextPlayer] > 0){
    #####:  875:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  876:	  state->discardCount[nextPlayer]--;
        -:  877:	}
        -:  878:	else{
        -:  879:	  //No Card to Reveal
        -:  880:	  if (DEBUG){
        -:  881:	    printf("No cards to reveal\n");
        -:  882:	  }
        -:  883:	}
        -:  884:      }
        -:  885:	    
        -:  886:      else{
    #####:  887:	if (state->deckCount[nextPlayer] == 0){
    #####:  888:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  889:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  890:	    state->deckCount[nextPlayer]++;
    #####:  891:	    state->discard[nextPlayer][i] = -1;
    #####:  892:	    state->discardCount[nextPlayer]--;
        -:  893:	  }
        -:  894:			    
    #####:  895:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  896:	} 
    #####:  897:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  898:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  899:	state->deckCount[nextPlayer]--;
    #####:  900:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  901:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  902:	state->deckCount[nextPlayer]--;
        -:  903:      }    
        -:  904:		       
    #####:  905:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  906:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  907:	state->playedCardCount++;
    #####:  908:	tributeRevealedCards[1] = -1;
        -:  909:      }
        -:  910:	
    #####:  911:      for (i = 0; i <= 2; i ++){
    #####:  912:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  913:	  state->coins += 2;
        -:  914:	}
        -:  915:		    
    #####:  916:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  917:	  drawCard(currentPlayer, state);
    #####:  918:	  drawCard(currentPlayer, state);
        -:  919:	}
        -:  920:	else{//Action Card
    #####:  921:	  state->numActions = state->numActions + 2;
    #####:  922:	i--;	//**BUG HERE**
        -:  923:	}
        -:  924:      }
        -:  925:	}    
        1:  926:	return 0;
        -:  927:}
        -:  928:
        -:  929:
        -:  930:
        -:  931:
        -:  932:
        -:  933:
        -:  934:
        -:  935:
        -:  936:
    #####:  937:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  938:{
        -:  939:  int i;
        -:  940:  int j;
        -:  941:  int k;
        -:  942:  int x;
        -:  943:  int index;
    #####:  944:  int currentPlayer = whoseTurn(state);
    #####:  945:  int nextPlayer = currentPlayer + 1;
        -:  946:  
        -:  947:  int temphand[MAX_HAND];// moved above the if statement
    #####:  948:  int drawntreasure=0;
        -:  949:  int cardDrawn;
    #####:  950:  int z = 0;// this is the counter for the temp hand
    #####:  951:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  952:    nextPlayer = 0;
        -:  953:  }
        -:  954:  
        -:  955:	
        -:  956:  //uses switch to select card and perform actions
    #####:  957:  switch( card ) 
        -:  958:    {
        -:  959:    case adventurer:
    #####:  960:      while(drawntreasure<2){
    #####:  961:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  962:	  shuffle(currentPlayer, state);
        -:  963:	}
    #####:  964:	drawCard(currentPlayer, state);
    #####:  965:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  966:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  967:	  drawntreasure++;
        -:  968:	else{
    #####:  969:	  temphand[z]=cardDrawn;
    #####:  970:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  971:	  z++;
        -:  972:	}
        -:  973:      }
    #####:  974:      while(z-1>=0){
    #####:  975:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  976:	z=z-1;
        -:  977:      }
    #####:  978:      return 0;
        -:  979:			
        -:  980:    case council_room:
        -:  981:      //+4 Cards
    #####:  982:      for (i = 0; i < 4; i++)
        -:  983:	{
    #####:  984:	  drawCard(currentPlayer, state);
        -:  985:	}
        -:  986:			
        -:  987:      //+1 Buy
    #####:  988:      state->numBuys++;
        -:  989:			
        -:  990:      //Each other player draws a card
    #####:  991:      for (i = 0; i < state->numPlayers; i++)
        -:  992:	{
    #####:  993:	  if ( i != currentPlayer )
        -:  994:	    {
    #####:  995:	      drawCard(i, state);
        -:  996:	    }
        -:  997:	}
        -:  998:			
        -:  999:      //put played card in played card pile
    #####: 1000:      discardCard(handPos, currentPlayer, state, 0);
        -: 1001:			
    #####: 1002:      return 0;
        -: 1003:			
        -: 1004:    case feast:
        -: 1005:      //gain card with cost up to 5
        -: 1006:      //Backup hand
    #####: 1007:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1008:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1009:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1010:      }
        -: 1011:      //Backup hand
        -: 1012:
        -: 1013:      //Update Coins for Buy
    #####: 1014:      updateCoins(currentPlayer, state, 5);
    #####: 1015:      x = 1;//Condition to loop on
    #####: 1016:      while( x == 1) {//Buy one card
    #####: 1017:	if (supplyCount(choice1, state) <= 0){
        -: 1018:	  if (DEBUG)
        -: 1019:	    printf("None of that card left, sorry!\n");
        -: 1020:
        -: 1021:	  if (DEBUG){
        -: 1022:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1023:	  }
        -: 1024:	}
    #####: 1025:	else if (state->coins < getCost(choice1)){
    #####: 1026:	  printf("That card is too expensive!\n");
        -: 1027:
        -: 1028:	  if (DEBUG){
        -: 1029:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1030:	  }
        -: 1031:	}
        -: 1032:	else{
        -: 1033:
        -: 1034:	  if (DEBUG){
        -: 1035:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1036:	  }
        -: 1037:
    #####: 1038:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1039:	  x = 0;//No more buying cards
        -: 1040:
        -: 1041:	  if (DEBUG){
        -: 1042:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1043:	  }
        -: 1044:
        -: 1045:	}
        -: 1046:      }     
        -: 1047:
        -: 1048:      //Reset Hand
    #####: 1049:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1050:	state->hand[currentPlayer][i] = temphand[i];
    #####: 1051:	temphand[i] = -1;
        -: 1052:      }
        -: 1053:      //Reset Hand
        -: 1054:      			
    #####: 1055:      return 0;
        -: 1056:			
        -: 1057:    case gardens:
    #####: 1058:      return -1;
        -: 1059:			
        -: 1060:    case mine:
    #####: 1061:	return caseMine(state, choice1, choice2, handPos, currentPlayer);
        -: 1062:			
        -: 1063:    case remodel:
    #####: 1064:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1065:
    #####: 1066:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1067:	{
    #####: 1068:	  return -1;
        -: 1069:	}
        -: 1070:
    #####: 1071:      gainCard(choice2, state, 0, currentPlayer);
        -: 1072:
        -: 1073:      //discard card from hand
    #####: 1074:      discardCard(handPos, currentPlayer, state, 0);
        -: 1075:
        -: 1076:      //discard trashed card
    #####: 1077:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1078:	{
    #####: 1079:	  if (state->hand[currentPlayer][i] == j)
        -: 1080:	    {
    #####: 1081:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1082:	      break;
        -: 1083:	    }
        -: 1084:	}
        -: 1085:
        -: 1086:
    #####: 1087:      return 0;
        -: 1088:		
        -: 1089:    case smithy:
        -: 1090:      //+3 Cards
    #####: 1091:      for (i = 0; i < 3; i++)
        -: 1092:	{
    #####: 1093:	  drawCard(currentPlayer, state);
        -: 1094:	}
        -: 1095:			
        -: 1096:      //discard card from hand
    #####: 1097:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1098:      return 0;
        -: 1099:		
        -: 1100:    case village:
        -: 1101:      //+1 Card
    #####: 1102:      drawCard(currentPlayer, state);
        -: 1103:			
        -: 1104:      //+2 Actions
    #####: 1105:      state->numActions = state->numActions + 2;
        -: 1106:			
        -: 1107:      //discard played card from hand
    #####: 1108:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1109:      return 0;
        -: 1110:		
        -: 1111:    case baron:
        -: 1112:
    #####: 1113:     	return caseBaron(state, choice1, currentPlayer);
        -: 1114:		
        -: 1115:    case great_hall:
        -: 1116:      //+1 Card
    #####: 1117:      drawCard(currentPlayer, state);
        -: 1118:			
        -: 1119:      //+1 Actions
    #####: 1120:      state->numActions++;
        -: 1121:			
        -: 1122:      //discard card from hand
    #####: 1123:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1124:      return 0;                                                                                                                                   
        -: 1125:    case minion:
    #####: 1126:	return caseMinion(state, choice1, choice2, handPos, currentPlayer);
        -: 1127:
        -: 1128:    case steward:
    #####: 1129:      if (choice1 == 1)
        -: 1130:	{
        -: 1131:	  //+2 cards
    #####: 1132:	  drawCard(currentPlayer, state);
    #####: 1133:	  drawCard(currentPlayer, state);
        -: 1134:	}
    #####: 1135:      else if (choice1 == 2)
        -: 1136:	{
        -: 1137:	  //+2 coins
    #####: 1138:	  state->coins = state->coins + 2;
        -: 1139:	}
        -: 1140:      else
        -: 1141:	{
        -: 1142:	  //trash 2 cards in hand
    #####: 1143:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1144:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1145:	}
        -: 1146:			
        -: 1147:      //discard card from hand
    #####: 1148:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1149:      return 0;
        -: 1150:		
        -: 1151:    case tribute:
    #####: 1152:	return caseTribute(state, currentPlayer, nextPlayer);
        -: 1153:
        -: 1154:
        -: 1155:	case ambassador:
        -: 1156:
    #####: 1157:	return caseAmbassador(state, choice1, choice2, handPos, currentPlayer);
        -: 1158:		
        -: 1159:    case cutpurse:
        -: 1160:
    #####: 1161:      updateCoins(currentPlayer, state, 2);
    #####: 1162:      for (i = 0; i < state->numPlayers; i++)
        -: 1163:	{
    #####: 1164:	  if (i != currentPlayer)
        -: 1165:	    {
    #####: 1166:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1167:		{
    #####: 1168:		  if (state->hand[i][j] == copper)
        -: 1169:		    {
    #####: 1170:		      discardCard(j, i, state, 0);
    #####: 1171:		      break;
        -: 1172:		    }
    #####: 1173:		  if (j == state->handCount[i])
        -: 1174:		    {
    #####: 1175:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1176:			{
        -: 1177:			  if (DEBUG)
        -: 1178:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1179:			}	
    #####: 1180:		      break;
        -: 1181:		    }		
        -: 1182:		}
        -: 1183:					
        -: 1184:	    }
        -: 1185:				
        -: 1186:	}				
        -: 1187:
        -: 1188:      //discard played card from hand
    #####: 1189:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1190:
    #####: 1191:      return 0;
        -: 1192:
        -: 1193:		
        -: 1194:    case embargo: 
        -: 1195:      //+2 Coins
    #####: 1196:      state->coins = state->coins + 2;
        -: 1197:			
        -: 1198:      //see if selected pile is in play
    #####: 1199:      if ( state->supplyCount[choice1] == -1 )
        -: 1200:	{
    #####: 1201:	  return -1;
        -: 1202:	}
        -: 1203:			
        -: 1204:      //add embargo token to selected supply pile
    #####: 1205:      state->embargoTokens[choice1]++;
        -: 1206:			
        -: 1207:      //trash card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case outpost:
        -: 1212:      //set outpost flag
    #####: 1213:      state->outpostPlayed++;
        -: 1214:			
        -: 1215:      //discard card
    #####: 1216:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case salvager:
        -: 1220:      //+1 buy
    #####: 1221:      state->numBuys++;
        -: 1222:			
    #####: 1223:      if (choice1)
        -: 1224:	{
        -: 1225:	  //gain coins equal to trashed card
    #####: 1226:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1227:	  //trash card
    #####: 1228:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1229:	}
        -: 1230:			
        -: 1231:      //discard card
    #####: 1232:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1233:      return 0;
        -: 1234:		
        -: 1235:    case sea_hag:
    #####: 1236:      for (i = 0; i < state->numPlayers; i++){
    #####: 1237:	if (i != currentPlayer){
    #####: 1238:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1239:	  state->discardCount[i]++;
    #####: 1240:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1241:	}
        -: 1242:      }
    #####: 1243:      return 0;
        -: 1244:		
        -: 1245:    case treasure_map:
        -: 1246:      //search hand for another treasure_map
    #####: 1247:      index = -1;
    #####: 1248:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1249:	{
    #####: 1250:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1251:	    {
    #####: 1252:	      index = i;
    #####: 1253:	      break;
        -: 1254:	    }
        -: 1255:	}
    #####: 1256:      if (index > -1)
        -: 1257:	{
        -: 1258:	  //trash both treasure cards
    #####: 1259:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1260:	  discardCard(index, currentPlayer, state, 1);
        -: 1261:
        -: 1262:	  //gain 4 Gold cards
    #####: 1263:	  for (i = 0; i < 4; i++)
        -: 1264:	    {
    #####: 1265:	      gainCard(gold, state, 1, currentPlayer);
        -: 1266:	    }
        -: 1267:				
        -: 1268:	  //return success
    #####: 1269:	  return 1;
        -: 1270:	}
        -: 1271:			
        -: 1272:      //no second treasure_map found in hand
    #####: 1273:      return -1;
        -: 1274:    }
        -: 1275:	
    #####: 1276:  return -1;
        -: 1277:}
        -: 1278:
       10: 1279:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1280:{
        -: 1281:	
        -: 1282:  //if card is not trashed, added to Played pile 
       10: 1283:  if (trashFlag < 1)
        -: 1284:    {
        -: 1285:      //add card to played pile
        9: 1286:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        9: 1287:      state->playedCardCount++;
        -: 1288:    }
        -: 1289:	
        -: 1290:  //set played card to -1
       10: 1291:  state->hand[currentPlayer][handPos] = -1;
        -: 1292:	
        -: 1293:  //remove card from player's hand
       10: 1294:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1295:    {
        -: 1296:      //reduce number of cards in hand
        2: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
        8: 1299:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1300:    {
        -: 1301:      //reduce number of cards in hand
        1: 1302:      state->handCount[currentPlayer]--;
        -: 1303:    }
        -: 1304:  else 	
        -: 1305:    {
        -: 1306:      //replace discarded card with last card in hand
        7: 1307:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1308:      //set last card to -1
        7: 1309:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1310:      //reduce number of cards in hand
        7: 1311:      state->handCount[currentPlayer]--;
        -: 1312:    }
        -: 1313:	
       10: 1314:  return 0;
        -: 1315:}
        -: 1316:
        2: 1317:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1318:{
        -: 1319:  //Note: supplyPos is enum of choosen card
        -: 1320:	
        -: 1321:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1322:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1323:    {
    #####: 1324:      return -1;
        -: 1325:    }
        -: 1326:	
        -: 1327:  //added card for [whoseTurn] current player:
        -: 1328:  // toFlag = 0 : add to discard
        -: 1329:  // toFlag = 1 : add to deck
        -: 1330:  // toFlag = 2 : add to hand
        -: 1331:
        2: 1332:  if (toFlag == 1)
        -: 1333:    {
    #####: 1334:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1335:      state->deckCount[player]++;
        -: 1336:    }
        2: 1337:  else if (toFlag == 2)
        -: 1338:    {
        1: 1339:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1340:      state->handCount[player]++;
        -: 1341:    }
        -: 1342:  else
        -: 1343:    {
        1: 1344:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1345:      state->discardCount[player]++;
        -: 1346:    }
        -: 1347:	
        -: 1348:  //decrease number in supply pile
        2: 1349:  state->supplyCount[supplyPos]--;
        -: 1350:	 
        2: 1351:  return 0;
        -: 1352:}
        -: 1353:
       14: 1354:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1355:{
        -: 1356:  int i;
        -: 1357:	
        -: 1358:  //reset coin count
       14: 1359:  state->coins = 0;
        -: 1360:
        -: 1361:  //add coins for each Treasure card in player's hand
       84: 1362:  for (i = 0; i < state->handCount[player]; i++)
        -: 1363:    {
       70: 1364:      if (state->hand[player][i] == copper)
        -: 1365:	{
       54: 1366:	  state->coins += 1;
        -: 1367:	}
       16: 1368:      else if (state->hand[player][i] == silver)
        -: 1369:	{
    #####: 1370:	  state->coins += 2;
        -: 1371:	}
       16: 1372:      else if (state->hand[player][i] == gold)
        -: 1373:	{
    #####: 1374:	  state->coins += 3;
        -: 1375:	}	
        -: 1376:    }	
        -: 1377:
        -: 1378:  //add bonus
       14: 1379:  state->coins += bonus;
        -: 1380:
       14: 1381:  return 0;
        -: 1382:}
        -: 1383:
        -: 1384:
        -: 1385://end of dominion.c
        -: 1386:
